---
# ------------------------------------------------------------------------
# tasks file for deployment_user
# ------------------------------------------------------------------------

# - name: install deployment_user
#   package:
#     name: "{{ deployment_user_packages }}"
#     state: present
#   register: deployment_user_install_deployment_user
#   until: deployment_user_install_deployment_user is succeeded
#   retries: 3
#
# - name: configure deployment_user
#   template:
#     src: "{{ deployment_user_config_file }}.j2"
#     dest: "{{ deployment_user_config_directory }}/{{ deployment_user_config_file }}"
#   notify:
#     - restart deployment_user
#
# - name: start and enable deployment_user
#   service:
#     name: "{{ deployment_user_service }}"
#     state: started
#     enabled: true
#   when:
#     - ansible_virtualization_type != "docker"




# ------------------------------------------------------------------------
# deployment user
# ------------------------------------------------------------------------
- name: check for sudo and admin groups
  group: name="{{ item }}" state=present system=yes
  with_items:
    - sudo
    - admins

- name: check for deploy user
  user:
    name: "{{ srv_init_deploy_user.name }}"
    comment: "deploy"
    groups: "sudo,admins"
    password: "{{ srv_init_deploy_user.password }}"
    shell: "/bin/bash"
    state: present

- name: deploy ssh public keys for deploy user
  authorized_key:
    user: "{{ ansible_ssh_user }}"
    key: "{{ item.key }}"
    state: "{{ item.state | default("absent") }}"
  with_items:
    - "{{ srv_init_deploy_user.ssh_keys }}"

- name: deploy ssh public keys for admin user
  authorized_key:
    user: "{{ srv_init_admin_user.name }}"
    key: "{{ item.key }}"
    state: "{{ item.state }}"
  with_items:
    - "{{ srv_init_admin_user.ssh_keys }}"

- name: copy ssh user config
  copy:
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: 0640
    src: ssh_config
    dest: "~{{ item }}/.ssh/config"
  with_items:
    - "{{ srv_init_deploy_user.name }}"
    # - "{{ srv_init_admin_user.name }}"
    # - "root"

- name: copy sudoers file
  copy:
    owner: root
    group: root
    src: sudoers
    dest: "/etc/sudoers"
    mode: 0440







# ------------------------------------------------------------------------
# SSHd configs
# ------------------------------------------------------------------------
- name: remove old sshd host keys
  file:
    name: "/etc/ssh/{{ item }}"
    state: absent
  with_items:
    - ssh_host_dsa_key
    - ssh_host_dsa_key.pub
    - ssh_host_ecdsa_key
    - ssh_host_ecdsa_key.pub
    - ssh_host_ed25519_key
    - ssh_host_ed25519_key.pub
    - ssh_host_rsa_key
    - ssh_host_rsa_key.pub
  when: srv_init_renew_sshd_keys | bool

- name: re-create sshd host keys
  command: dpkg-reconfigure -plow -fnoninteractive openssh-server
  when: srv_init_renew_sshd_keys | bool

- name: copy sshd config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode | default('644') }}"
  with_items:
    - { src: "sshd_config.j2", dest: "/etc/ssh/sshd_config" }

- name: restart sshd
  service:
    name: ssh
    state: restarted

- name: copy issue.net
  copy:
    owner: root
    group: root
    mode: 0644
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "issue.net", dest: "/etc/" }
